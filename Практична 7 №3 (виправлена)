import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Створення матриці 5x5
        int[][] matrix = new int[5][5];

        System.out.println("Введіть елементи матриці 5x5:");

        // Введення елементів матриці користувачем
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                System.out.print("Элемент [" + i + "][" + j + "]: ");
                matrix[i][j] = scanner.nextInt();
            }
        }

        // Виведення матриці
        System.out.println("\nВведена матриця:");
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                System.out.printf("%4d", matrix[i][j]);
            }
            System.out.println();
        }

        // Визначник матриці 5x5
        int determinant = calculateDeterminant5x5(matrix);

        // Висновок результату
        System.out.println("\nВизначник матриці: " + determinant);
    }

    // Метод обчислення визначника матриці 5x5
    public static int calculateDeterminant5x5(int[][] m) {
        return m[0][0] * (m[1][1] * (m[2][2] * (m[3][3] * m[4][4] - m[3][4] * m[4][3]) -
                m[2][3] * (m[3][2] * m[4][4] - m[3][4] * m[4][2]) +
                m[2][4] * (m[3][2] * m[4][3] - m[3][3] * m[4][2])) -
                m[1][2] * (m[2][1] * (m[3][3] * m[4][4] - m[3][4] * m[4][3]) -
                        m[2][3] * (m[3][1] * m[4][4] - m[3][4] * m[4][1]) +
                        m[2][4] * (m[3][1] * m[4][3] - m[3][3] * m[4][1])) +
                m[1][3] * (m[2][1] * (m[3][2] * m[4][4] - m[3][4] * m[4][2]) -
                        m[2][2] * (m[3][1] * m[4][4] - m[3][4] * m[4][1]) +
                        m[2][4] * (m[3][1] * m[4][2] - m[3][2] * m[4][1])) -
                m[1][4] * (m[2][1] * (m[3][2] * m[4][3] - m[3][3] * m[4][2]) -
                        m[2][2] * (m[3][1] * m[4][3] - m[3][3] * m[4][1]) +
                        m[2][3] * (m[3][1] * m[4][2] - m[3][2] * m[4][1]))) -
                m[0][1] * (m[1][0] * (m[2][2] * (m[3][3] * m[4][4] - m[3][4] * m[4][3]) -
                        m[2][3] * (m[3][2] * m[4][4] - m[3][4] * m[4][2]) +
                        m[2][4] * (m[3][2] * m[4][3] - m[3][3] * m[4][2])) -
                        m[1][2] * (m[2][0] * (m[3][3] * m[4][4] - m[3][4] * m[4][3]) -
                                m[2][3] * (m[3][0] * m[4][4] - m[3][4] * m[4][0]) +
                                m[2][4] * (m[3][0] * m[4][3] - m[3][3] * m[4][0])) +
                        m[1][3] * (m[2][0] * (m[3][2] * m[4][4] - m[3][4] * m[4][2]) -
                                m[2][2] * (m[3][0] * m[4][4] - m[3][4] * m[4][0]) +
                                m[2][4] * (m[3][0] * m[4][2] - m[3][2] * m[4][0])) -
                        m[1][4] * (m[2][0] * (m[3][2] * m[4][3] - m[3][3] * m[4][2]) -
                                m[2][2] * (m[3][0] * m[4][3] - m[3][3] * m[4][0]) +
                                m[2][3] * (m[3][0] * m[4][2] - m[3][2] * m[4][0]))); // 

    }
}
